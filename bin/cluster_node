#!/usr/bin/env node

/* jslint node: true, esnext: true */

"use strict";

const os = require('os'),
  fs = require('fs'),
  path = require('path'),
  pkginfo = require('pkginfo')(module, 'name', 'version'),
  commander = require('commander'),
  ksm = require('kronos-service-manager'),
  systemdSocket = require('systemd-socket'),
  rebirth = require('rebirth'),
  list_files = require('list_files').list_files;

var journald;

// try to use journald if present
try {
  journald = require('journald');
} catch (e) {}

const logger = journald ? journald.Log : console;

const kronosOptions = {
  logger: logger,
  services: {
    "consul": {
      "logLevel": "trace"
    },
    "admin": {
      "logLevel": "trace",
      "port": 10000
    }
  }
};

commander
  .version(module.exports.version)
  .description('run cluster node')
  //  .option('-ar, --autoregister', 'load and register all installed kronos moudles')
  .option('-n, --nodename <name>', 'kronos node name defaults to hostname')
  .option('-f, --flow <file>', 'specify flow definition to be registered')
  .option('-s, --start', 'also start flow after registering')
  .option('-d, --dataCenter <dataCenter>', 'specify consul data center')
  .option('-p, --port <portNumber>', `specify kronos http port (default is ${kronosOptions.services.admin.port})`)
  .parse(process.argv);

kronosOptions.name = commander.nodename ? commander.nodename : os.hostname();

if (commander.dataCenter) {
  serviceConfigs.consul.dataCenter = commander.dataCenter;
}

if (commander.port) {
  kronosOptions.services.admin.port = commander.port;
} else {
  kronosOptions.services.admin.port = systemdSocket();
}

process.on('SIGHUP', () => {
  logger.log('reboot');
  rebirth();
});

ksm.manager(kronosOptions).then(manager => {
    try {
      const baseDir = path.join(__dirname, '..', 'node_modules');
      list_files(baseDir, '', 'package.json', function (error, file, stat) {
        const f = path.join(baseDir, file);
        fs.readFile(f, function (err, data) {
          if (err) return;

          try {
            const p = JSON.parse(data);
            if (p.tags) {
              if (p.tags.indexOf('kronos-step') >= 0 || p.tags.indexOf('kronos-service') >= 0) {
                try {
                  require(p.name).registerWithManager(manager);
                  console.log(`${p.name} registered`);

                } catch (e) {
                  console.log(`${f}: ${p.name} ${e}`);
                }
              }
            }
          } catch (e) {}
        });
      }, function () {
        console.log(Object.keys(manager.services).map(name => {
          const s = manager.services[name];
          return `${name}:\n  state: ${s.state}\n  autostart: ${s.autostart}\n  logLevel: ${s.logLevel}`;
        }).join('\n'));

        if (commander.flow) {
          manager.loadFlowFromFile(commander.flow).then(flow => {
            logger.log(`Flow declared: ${flow}`);
            if (commander.start) {
              logger.log(`Starting ... ${flow}`);
              flow.start().then(() => logger.log(`Flow started: ${flow}`)).catch(error => logger.log(
                `Flow started failed: ${error}`))
            }
          }).catch(error => {
            logger.log(`Flow initialization failed: ${error}`);
          });
        }
      });
    } catch (e) {
      console.log(e);
    }

    return manager;
  },
  function (err) {
    logger.log(`manager failed: ${err}`);
  });

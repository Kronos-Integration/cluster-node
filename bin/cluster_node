#!/usr/bin/env node

/* jslint node: true, esnext: true */

"use strict";

const os = require('os'),
  fs = require('fs'),
  path = require('path'),
  pkginfo = require('pkginfo')(module, 'name', 'version'),
  commander = require('commander'),
  ksm = require('kronos-service-manager'),
  systemdSocket = require('systemd-socket'),
  rebirth = require('rebirth'),
  list_files = require('list_files').list_files;


Error.prepareStackTrace = (err, stackObj) => stackObj[0];

let logLevel = "info";

const config = [{
  // service-manager
}, {
  name: "admin",
  port: 10000
}, {
  name: "kronos"
}, {
  name: "consul"
}];

const sds = systemdSocket();
if (sds) {
  config[1].port = sds;
}

commander
  .version(module.exports.version)
  .description('run cluster node')
  .option('-f, --flow <file>', 'specify flow definition to be registered')
  .option('-s, --start', 'also start flow after registering')
  .option('-d, --debug', 'enable debugging')
  .parse(process.argv);

if (commander.debug) {
  logLevel = 'debug';
}

config.forEach(c => c.logLevel = logLevel);

process.on('SIGHUP', () => rebirth());

ksm.manager(config).then(manager => {
    try {
      const baseDir = path.join(__dirname, '..', 'node_modules');

      list_files(baseDir, '', 'package.json', (error, file, stat) => {
        const f = path.join(baseDir, file);
        fs.readFile(f, function (err, data) {
          if (err) {
            manager.error(`loading ${f}: ${e}`);
            return;
          }
          try {
            const p = JSON.parse(data);

            if (p.keywords) {
              if (p.keywords.find(k => k === 'kronos-step' || k === 'kronos-service' || k ===
                  'kronos-interceptor')) {
                try {
                  require(p.name).registerWithManager(manager);
                  manager.trace(level => `${p.name} registered`);
                } catch (e) {
                  manager.error(`${f}: ${p.name} ${e}`);
                }
              }
            }
          } catch (e) {
            manager.error(`${f}: ${e}`);
          }
        });
      }, () => {
        Object.keys(manager.services).forEach(name => {
          const s = manager.services[name];
          manager.info(level => ({
            'service-name': name,
            'state': s.state
          }));
        });

        if (commander.flow) {
          manager.loadFlowFromFile(commander.flow).then(flow => {
            manager.info(level => `Flow declared: ${flow}`);
            if (commander.start) {
              manager.info(level => `Starting ... ${flow}`);
              flow.start().then(() => manager.info(`Flow started: ${flow}`)).catch(error => manager.error(
                `Flow started failed: ${error}`));
            }
          }).catch(error => manager.error(`Flow initialization failed: ${error}`));
        }
      });
    } catch (e) {
      manager.error(e);
    }

    return manager;
  },
  err => manager.error(`manager failed: ${err}`));

#!/usr/bin/env node

/* jslint node: true, esnext: true */

"use strict";

const os = require('os');
const fs = require('fs');
const path = require('path');
const commander = require('commander');
const ksm = require('kronos-service-manager');
const ksmr = require('kronos-service-manager-rest');
const csm = require('consul-service-manager');
const systemdSocket = require('systemd-socket');

const consulOptions = {};
const restOptions = {};
const kronosOptions = {};

commander
  .option('-n, --name <name>', 'kronos node name defaults to hostname')
  .option('-f, --flow <file>', 'specify flow definition to be registered')
  .option('-s, --start', 'also start flows after registering')
  .option('-d, --dataCenter <dataCenter>', 'specify consul data center')
  .option('-p, --port <portNumber>', `specify kronos http port (default is ${ksmr.defaultKronosPort})`)
  .parse(process.argv);

if (commander.name) {
  kronosOptions.name = commander.name;
} else {
  kronosOptions.name = os.hostname();
}

if (commander.dataCenter) {
  consulOptions.dataCenter = commander.dataCenter;
}

if (commander.port) {
  restOptions.port = commander.port;
} else {
  restOptions.port = systemdSocket();
}

csm.manager(ksmr.manager(ksm.manager(kronosOptions), restOptions), consulOptions).then(function (manager) {
  require('kronos-step-archive-tar').registerWithManager(manager);
  require('kronos-service-manager-addon').registerWithManager(manager);

  if (commander.flow) {
    try {
      manager.registerFlows(JSON.parse(fs.readFileSync(commander.flow))).then(
        function (flows) {
          if (commander.start) {
            flows.forEach(f => {
              f.start();
            });
          }
        },
        function (rejected) {
          console.log(`Flow declaration/initialization failed: ${rejected}`);
        }
      );
    } catch (err) {
      console.log(`Flow declaration/initialization failed: ${err}`);
    }
  }

  console.log(`manager: ${manager}`);
  return manager;
}, function (err) {
  console.log(`manager failed: ${err}`);
});

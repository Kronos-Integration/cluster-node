#!/usr/bin/env iojs

/* jslint node: true, esnext: true */

"use strict";

const fs = require('fs');
const path = require('path');
const commander = require('commander');
const ksm = require('kronos-service-manager');
const ksmr = require('kronos-service-manager-rest');
const csm = require('consul-service-manager');


const consulOptions = {};
const restOptions = {};
const kronosOptions = {};

commander
  .option('-n, --name <name>', 'kronos node name')
  .option('-f, --flow <file>', 'specify flow definition')
  .option('-d, --dataCenter <dataCenter>', 'specify consul data center')
  .option('-p, --port <portNumber>', `specify kronos http port (default is ${ksmr.defaultKronosPort})`)
  .parse(process.argv);

if (commander.name) {
  kronosOptions.name = commander.name;
}

if (commander.dataCenter) {
  consulOptions.dataCenter = commander.dataCenter;
}

if (commander.port) {
  restOptions.port = commander.port;
}

csm.manager(ksmr.manager(ksm.manager(kronosOptions), restOptions), consulOptions).then(function (manager) {
  require('kronos-step-archive-tar').registerWithManager(manager);
  require('kronos-step-file-common').registerWithManager(manager);

  if (commander.flow) {
    try {
      const flows = manager.registerFlows(JSON.parse(fs.readFileSync(commander.flow)));
      for(const f of flows) {
        f.start();
      }
    } catch (err) {
      console.log(`Flow declaration/initialization failed: ${err}`);
    }
  }

  console.log(`manager: ${manager}`);
}, function (err) {
  console.log(`manager failed: ${err}`);
});

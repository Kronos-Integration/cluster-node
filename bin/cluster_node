#!/usr/bin/env node

/* jslint node: true, esnext: true */

"use strict";

const os = require('os'),
  fs = require('fs'),
  path = require('path'),
  commander = require('commander'),
  ksm = require('kronos-service-manager'),
  ksmr = require('kronos-service-manager-rest'),
  csm = require('kronos-consul-service-manager'),
  systemdSocket = require('systemd-socket'),
  // launchd = require('node-launchd'),
  rebirth = require('rebirth'),
  serve = require('koa-static');

var journald;

// try to use journald if present
try {
  journald = require('journald');
} catch (e) {}

const logger = journald ? journald.Log : console;

const consulOptions = {
  logger: logger
};

const restOptions = {};
const kronosOptions = {};

commander
  .option('-n, --name <name>', 'kronos node name defaults to hostname')
  .option('-f, --flow <file>', 'specify flow definition to be registered')
  .option('-s, --start', 'also start flow after registering')
  .option('-d, --dataCenter <dataCenter>', 'specify consul data center')
  .option('-p, --port <portNumber>', `specify kronos http port (default is ${ksmr.defaultKronosPort})`)
  .parse(process.argv);

if (commander.name) {
  kronosOptions.name = commander.name;
} else {
  kronosOptions.name = os.hostname();
}

if (commander.dataCenter) {
  consulOptions.dataCenter = commander.dataCenter;
}

if (commander.port) {
  restOptions.port = commander.port;
} else {
  /*
  const fd = getSocketFileDescriptorForName('HTTPSocket');
  if (fd) {
    restOptions.port = {
      fd: fd
    };
  }*/
  restOptions.port = systemdSocket();
}

process.on('SIGHUP', function () {
  logger.log('reboot');
  rebirth();
});

csm.manager(ksmr.manager(ksm.manager(kronosOptions), restOptions), consulOptions).then(function (manager) {

  const docroot = path.join(__dirname, '../docroot');

  logger.log(`serving ${docroot}`);
  manager.app.use(serve(docroot));

  require('kronos-step-archive-tar').registerWithManager(manager);
  require('kronos-service-manager-addon').registerWithManager(manager);

  if (commander.flow) {
    try {
      manager.registerFlow(JSON.parse(fs.readFileSync(commander.flow))).then(
        function (flow) {
          logger.log(`Flow declared: ${flow}`);
          if (commander.start) {
            flow.start();
          }
        },
        function (rejected) {
          logger.log(`Flow initialization failed: ${rejected}`);
        }
      );
    } catch (err) {
      logger.log(`Flow initialization failed: ${err}`);
    }
  }

  logger.log(`manager: ${manager}`);
  return manager;
}, function (err) {
  logger.log(`manager failed: ${err}`);
});

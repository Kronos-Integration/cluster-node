#!/usr/bin/env node

/* jslint node: true, esnext: true */

"use strict";

const os = require('os'),
  fs = require('fs'),
  path = require('path'),
  pkginfo = require('pkginfo')(module, 'name', 'version'),
  commander = require('commander'),
  ksm = require('kronos-service-manager'),
  systemdSocket = require('systemd-socket'),
  rebirth = require('rebirth'),
  list_files = require('list_files').list_files;


//Error.prepareStackTrace = (err, stackObj) => stackObj[0];

let logLevel = "info";

const config = [{
  name: "kronos"
}, {
  name: "admin",
  port: 10000
}, {
  name: "registry", // consul
  checkInterval: "60s"
}];

const sds = systemdSocket();
if (sds) {
  config[1].port = sds;
}

commander
  .version(module.exports.version)
  .description('run cluster node')
  .option('-f, --flow <file>', 'specify flow definition to be registered')
  .option('-s, --start', 'start flow after registering')
  .option('-d, --debug', 'enable debugging')
  .option('-t, --trace', 'enable tracing')
  .parse(process.argv);

if (commander.debug) {
  logLevel = 'debug';
} else if (commander.trace) {
  logLevel = 'trace';
}

config.forEach(c => c.logLevel = logLevel);

process.on('SIGHUP', () => rebirth());

const baseDir = path.join(__dirname, '..', 'node_modules');

const modules = [];

list_files(baseDir, '', 'package.json', (error, file, stat) => {
  const f = path.join(baseDir, file);
  fs.readFile(f, (err, data) => {
    if (err) {
      console.error(`loading ${f}: ${err}`);
      return;
    }
    try {
      const p = JSON.parse(data);

      if (p.keywords) {
        if (p.keywords.find(k => k === 'kronos-step' || k === 'kronos-service' || k ===
            'kronos-interceptor')) {
          try {
            modules.push(require(p.name));
          } catch (e) {
            console.error(`${f}: ${p.name} ${e}`);
          }
        }
      }
    } catch (e) {
      console.error(`${f}: ${e}`);
    }
  });
}, () => {
  ksm.manager(config, modules).then(manager => {
    Object.keys(manager.services).forEach(name => {
      const s = manager.services[name];
      manager.info(level => ({
        'service-name': name,
        'state': s.state
      }));
    });
    if (commander.flow) {
      manager.loadFlowFromFile(commander.flow).then(flow => {
        manager.info(level => `Flow declared: ${flow}`);
        if (commander.start) {
          manager.info(level => `Starting ... ${flow}`);
          flow.start().then(() => manager.info(`Flow started: ${flow}`)).catch(error => manager.error(
            `Flow started failed: ${error}`));
        }
      }).catch(error => manager.error(`Flow initialization failed: ${error}`));
    }
  });
});
